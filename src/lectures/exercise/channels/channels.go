//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import (
	"fmt"
	"math/rand"
	"time"
)

type Job int
type Result int

func longCalculation(i Job) Result {
	var duration = time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return Result(i) * 30
}

func makeJobs(jobsToMake int) []Job {
	var jobsArr = make([]Job, 0, jobsToMake)
	for i := 0; i < jobsToMake; i++ {
		jobsArr = append(jobsArr, Job(rand.Intn(10000)))
	}
	return jobsArr
}

func calculator(job Job, resultChannel chan<- Result) {
	resultChannel <- longCalculation(job)
}

func main() {
	rand.New(rand.NewSource(time.Now().UnixNano())) // seeding the random generator

	const NumberOfJobs = 100
	var jobs = makeJobs(NumberOfJobs)
	var resultsChannel = make(chan Result, NumberOfJobs)

	var finalSum Result
	var jobsProcessed Job

	for _, job := range jobs {
		go calculator(job, resultsChannel)
	}

	for jobsProcessed < NumberOfJobs {
		finalSum += <-resultsChannel
		jobsProcessed++
	}

	fmt.Println("finalSum", finalSum)
}
